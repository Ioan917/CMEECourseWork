d <- summary(model)$fstatistic[[1]] # F-value
e <- anova(model)$'Pr(>F)'[1] # p-value of F
new_line <- c("piscivorous", stage, a, c, d, e)
df <- rbind(df, new_line)
}
for(i in unique(pl$Predator.lifestage)) {
model <- lm(pl$log.Prey.mass[pl$Predator.lifestage == i] ~
pl$log.Predator.mass[pl$Predator.lifestage == i])
stage <- i
a <- summary(model)$coefficients[1:2] # regression intercept, slope
c <- summary(model)$r.squared # R^2
d <- summary(model)$fstatistic[[1]] # F-value
e <- anova(model)$'Pr(>F)'[1] # p-value of F
new_line <- c("planktivorous", stage, a, c, d, e)
df <- rbind(df, new_line)
}
for(i in unique(pr$Predator.lifestage)) {
model <- lm(pr$log.Prey.mass[pr$Predator.lifestage == i] ~
pr$log.Predator.mass[pr$Predator.lifestage == i])
stage <- i
a <- summary(model)$coefficients[1:2] # regression intercept, slope
c <- summary(model)$r.squared # R^2
d <- summary(model)$fstatistic[[1]] # F-value
e <- anova(model)$'Pr(>F)'[1] # p-value of F
new_line <- c("predacious", stage, a, c, d, e)
df <- rbind(df, new_line)
}
for(i in unique(ins$Predator.lifestage)) {
model <- lm(ins$log.Prey.mass[ins$Predator.lifestage == i] ~
ins$log.Predator.mass[ins$Predator.lifestage == i])
stage <- i
a <- summary(model)$coefficients[1:2] # regression intercept, slope
c <- summary(model)$r.squared # R^2
d <- summary(model)$fstatistic[[1]] # F-value
e <- anova(model)$'Pr(>F)'[1] # p-value of F
new_line <- c("insectivorous", stage, a, c, d, e)
df <- rbind(df, new_line)
}
View(df)
View(df)
df[1, ] <- NULL
df <- df[-1,]
write.csv(df, "../Results/.csv", row.names = FALSE)
print("Script done!")
write.csv(df, "../Results/.csv", row.names = FALSE)
write.csv(df, "../Results/PP_Regress_Results.csv", row.names = FALSE)
data <- load("../Data/KeyWestAnnualMeanTemperature.RData")
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C")
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C")
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C",
xlim = c(1900, 2000))
ylab = "Temperature °C"
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C")
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C",
pch = 2)
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C",
cex = 2)
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C",
cex = 4)
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C",
cex.axes = 4)
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C",
cex.axis = 4)
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C",
cex.axis = 2)
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C",
cex.axis = 1.5)
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C",
cex.axis = 1.3)
plot(ats$Temp ~ ats$Year,
xlab = "Year",
ylab = "Temperature °C",
cex.axis = 1.3,
cex.lab = 1.4)
?fix
utils:Viewfix(MyMetaData) ##
library(tidyverse)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
# header = true because we do have metadata headers
MyMetaData <- read_csv2("../Data/PoundHillMetaData.csv", col_names = TRUE)
utils:Viewfix(MyData) ##
utils::Viewfix(MyData) ##
utils::View(MyData) ##
utils::View(MyMetaData) ##
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- MyData %>%
tibble::rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from=rowname, values_from=value)
View(MyData)
MyData <- [-1, -1]
MyData <- MyData[-1, -1]
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- MyData %>%
tibble::rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from=rowname, values_from=value)
MyData <- MyData[, -1]
# Make first row the header
names(MyData) <- as.matrix(MyData[1, ])
MyData <- MyData[-1, ]
MyData[] <- lapply(MyData, function(x) type.convert(as.character(x)))
############# Replace species absences with zeros ###############
MyData <- MyData %>% replace(is.na(.), 0)
class(MyData)
TempData <- as_data_frame(MyData[-1,],stringsAsFactors = F)
View(TempData)
class(TempData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv", header = FALSE))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv", header = TRUE, sep = ";")
rm(list=ls())
dev.off()
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
# header = true because we do have metadata headers
MyMetaData <- read_csv2("../Data/PoundHillMetaData.csv", col_names = TRUE)
############# Inspect the dataset ###############
dplyr::slice(MyData, 1:5)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- MyData %>%
tibble::rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from=rowname, values_from=value)
# Rmove first column
MyData <- MyData[, -1]
# Make first row the header
names(MyData) <- as.matrix(MyData[1, ])
MyData <- MyData[-1, ]
MyData[] <- lapply(MyData, function(x) type.convert(as.character(x)))
View(MyData)
############# Replace species absences with zeros ###############
MyData <- MyData %>% replace(is.na(.), 0)
############# Convert from wide to long format  ###############
library(reshape2) # load the reshape2 package
?gather
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
p <- ggplot(MyDF, aes(x = log(Prey.mass),
y = log(Predator.mass),
col =  Predator.lifestage)) +
geom_point(shape = I(3)) +
facet_wrap( .~ Type.of.feeding.interaction, strip.position = "right", ncol = 1) +
geom_smooth(method = lm, se = TRUE, fullrange = TRUE, size = 0.5) +
theme_bw() +
theme(aspect.ratio = 0.5,
legend.position = "bottom",
legend.key = element_rect(colour = "grey", fill = "lightgrey")
) +
guides(guide_legend(nrow = 1)) +
labs(titles = NULL,
x = "log Prey mass in grams",
y = "log Predator mass in grams")
p
p <- ggplot(MyDF, aes(x = log(Prey.mass),
y = log(Predator.mass),
col =  Predator.lifestage)) +
geom_point(shape = I(3)) +
facet_wrap( .~ Type.of.feeding.interaction, strip.position = "right", ncol = 1) +
geom_smooth(method = lm, se = TRUE, fullrange = TRUE, size = 0.5) +
theme_bw() +
theme(aspect.ratio = 0.5,
legend.position = "bottom",
legend.key = element_rect(colour = "grey", fill = "lightgrey")
) +
guides(colours = guide_legend(nrow = 1)) +
labs(titles = NULL,
x = "log Prey mass in grams",
y = "log Predator mass in grams")
p
p <- ggplot(MyDF, aes(x = log(Prey.mass),
y = log(Predator.mass),
col =  Predator.lifestage)) +
geom_point(shape = I(3)) +
facet_wrap( .~ Type.of.feeding.interaction, strip.position = "right", ncol = 1) +
geom_smooth(method = lm, se = TRUE, fullrange = TRUE, size = 0.5) +
theme_bw() +
theme(aspect.ratio = 0.5,
legend.position = "bottom",
legend.key = element_rect(colour = "grey", fill = "lightgrey")
) +
guides(colour = guide_legend(nrow = 1)) +
labs(titles = NULL,
x = "log Prey mass in grams",
y = "log Predator mass in grams")
p
?guides
MyWrangledData <- gather(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv", header = FALSE))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv", header = TRUE, sep = ";")
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
colnames(MyWrangledData)[6] <- "Count"
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
View(MyWrangledData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
# header = true because we do have metadata headers
MyMetaData <- read_csv2("../Data/PoundHillMetaData.csv", col_names = TRUE)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- MyData %>%
tibble::rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from=rowname, values_from=value)
############# Replace species absences with zeros ###############
MyData <- MyData %>% replace(is.na(.), 0)
# Remove first column
MyData <- MyData[, -1]
# Make first row the header
names(MyData) <- as.matrix(MyData[1, ])
MyData <- MyData[-1, ]
MyData[] <- lapply(MyData, function(x) type.convert(as.character(x)))
View(TempData)
MyWrangledData2 <- gather(TempData, Species, Count, [,5:45])
MyWrangledData2 <- gather(TempData, Species, Count, [,5]:[,45])
MyWrangledData2 <- gather(TempData, key = "Species", value = "Count", factor_key = FALSE, -Cultivation, -Block, -Plot, -Quadrat)
View(MyWrangledData2)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
View(MyWrangledData)
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################
library(tidyverse)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
# header = true because we do have metadata headers
MyMetaData <- read_csv2("../Data/PoundHillMetaData.csv", col_names = TRUE)
############# Inspect the dataset ###############
dplyr::slice(MyData, 1:5)
dplyr::glimpse(MyData)
utils::View(MyData)
utils::View(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- MyData %>%
tibble::rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from=rowname, values_from=value)
dplyr::slice(MyData, 1:5)
############# Replace species absences with zeros ###############
MyData <- MyData %>% replace(is.na(.), 0)
############# Convert raw matrix to data frame ###############
# Remove first column
MyData <- MyData[, -1]
# Make first row the header
names(MyData) <- as.matrix(MyData[1, ])
MyData <- MyData[-1, ]
MyData[] <- lapply(MyData, function(x) type.convert(as.character(x)))
############# Convert from wide to long format  ###############
# use gather() from tidyr
MyWrangledData <- gather(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
MyWrangledData2 <- gather(TempData, key = "Species", value = "Count", factor_key = FALSE, -Cultivation, -Block, -Plot, -Quadrat)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
############# Exploring the data (extend the script below)  ###############
utils::View(MyData)
utils::View(MyMetaData)
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################
library(tidyverse)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
# header = true because we do have metadata headers
MyMetaData <- read_csv2("../Data/PoundHillMetaData.csv", col_names = TRUE)
############# Inspect the dataset ###############
dplyr::slice(MyData, 1:5)
dplyr::glimpse(MyData)
utils::View(MyData)
utils::View(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- MyData %>%
tibble::rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from=rowname, values_from=value)
dplyr::slice(MyData, 1:5)
############# Replace species absences with zeros ###############
MyData <- MyData %>% replace(is.na(.), 0)
############# Convert raw matrix to data frame ###############
# Remove first column
MyData <- MyData[, -1]
# Make first row the header
names(MyData) <- as.matrix(MyData[1, ])
MyData <- MyData[-1, ]
MyData[] <- lapply(MyData, function(x) type.convert(as.character(x)))
############# Convert from wide to long format  ###############
# use gather() from tidyr
MyWrangledData <- gather(TempData, key = "Species", value = "Count", factor_key = FALSE, -Cultivation, -Block, -Plot, -Quadrat)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
############# Exploring the data (extend the script below)  ###############
rm(list = ls())
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################
library(tidyverse)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
# header = true because we do have metadata headers
MyMetaData <- read_csv2("../Data/PoundHillMetaData.csv", col_names = TRUE)
############# Inspect the dataset ###############
dplyr::slice(MyData, 1:5)
dplyr::glimpse(MyData)
utils::View(MyData)
utils::View(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- MyData %>%
tibble::rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from=rowname, values_from=value)
dplyr::slice(MyData, 1:5)
############# Replace species absences with zeros ###############
MyData <- MyData %>% replace(is.na(.), 0)
############# Convert raw matrix to data frame ###############
# Remove first column
MyData <- MyData[, -1]
# Make first row the header
names(MyData) <- as.matrix(MyData[1, ])
MyData <- MyData[-1, ]
MyData[] <- lapply(MyData, function(x) type.convert(as.character(x)))
############# Convert from wide to long format  ###############
# use gather() from tidyr
MyWrangledData <- gather(TempData, key = "Species", value = "Count", factor_key = FALSE, -Cultivation, -Block, -Plot, -Quadrat)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
############# Exploring the data (extend the script below)  ###############
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
# header = true because we do have metadata headers
MyMetaData <- read_csv2("../Data/PoundHillMetaData.csv", col_names = TRUE)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- MyData %>%
tibble::rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from=rowname, values_from=value)
############# Replace species absences with zeros ###############
MyData <- MyData %>% replace(is.na(.), 0)
# Remove first column
MyData <- MyData[, -1]
# Make first row the header
names(MyData) <- as.matrix(MyData[1, ])
MyData <- MyData[-1, ]
MyData[] <- lapply(MyData, function(x) type.convert(as.character(x)))
MyWrangledData <- gather(TempData, key = "Species", value = "Count", factor_key = FALSE, -Cultivation, -Block, -Plot, -Quadrat)
MyData <- gather(TempData, key = "Species", value = "Count", factor_key = FALSE, -Cultivation, -Block, -Plot, -Quadrat)
MyWrangledData <- gather(MyData, key = "Species", value = "Count", factor_key = FALSE, -Cultivation, -Block, -Plot, -Quadrat)
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################
library(tidyverse)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
# header = true because we do have metadata headers
MyMetaData <- read_csv2("../Data/PoundHillMetaData.csv", col_names = TRUE)
############# Inspect the dataset ###############
dplyr::slice(MyData, 1:5)
dplyr::glimpse(MyData)
utils::View(MyData)
utils::View(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- MyData %>%
tibble::rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from=rowname, values_from=value)
dplyr::slice(MyData, 1:5)
############# Replace species absences with zeros ###############
MyData <- MyData %>% replace(is.na(.), 0)
############# Convert raw matrix to data frame ###############
# Remove first column
MyData <- MyData[, -1]
# Make first row the header
names(MyData) <- as.matrix(MyData[1, ])
MyData <- MyData[-1, ]
MyData[] <- lapply(MyData, function(x) type.convert(as.character(x)))
############# Convert from wide to long format  ###############
# use gather() from tidyr
MyWrangledData <- gather(MyData, key = "Species", value = "Count", factor_key = FALSE, -Cultivation, -Block, -Plot, -Quadrat)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
############# Exploring the data (extend the script below)  ###############
rm(list = ls())
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################
library(tidyverse)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
# header = true because we do have metadata headers
MyMetaData <- read_csv2("../Data/PoundHillMetaData.csv", col_names = TRUE)
############# Inspect the dataset ###############
dplyr::slice(MyData, 1:5)
dplyr::glimpse(MyData)
utils::View(MyData)
utils::View(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- MyData %>%
tibble::rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from=rowname, values_from=value)
dplyr::slice(MyData, 1:5)
############# Replace species absences with zeros ###############
MyData <- MyData %>% replace(is.na(.), 0)
############# Convert raw matrix to data frame ###############
# Remove first column
MyData <- MyData[, -1]
# Make first row the header
names(MyData) <- as.matrix(MyData[1, ])
MyData <- MyData[-1, ]
MyData[] <- lapply(MyData, function(x) type.convert(as.character(x)))
############# Convert from wide to long format  ###############
# use gather() from tidyr
MyWrangledData <- gather(MyData, key = "Species", value = "Count", factor_key = FALSE, -Cultivation, -Block, -Plot, -Quadrat)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
############# Exploring the data (extend the script below)  ###############
View(MyWrangledData)
rm(list=ls())
dev.off()
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears=100) {
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, ] <- N[yr-1, ] * exp(r * (1 - N[yr - 1, ] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
return(N)
}
plot(stochrick)
plot(stochrick())
