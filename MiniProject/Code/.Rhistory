N_TraitValue ~ cubMod(ResDensity, b0, b1, b2, b3),
start = list(b0 = .1, b1 = .1, b2 = .1))
CubicFit <- nlsLM(data = data,
N_TraitValue ~ cubMod(ResDensity, b0, b1, b2, b3),
start = list(b0 = .1, b1 = .1, b2 = .1, b3 = .1))
summary(QuadFit)
summary(CubicFit)
# Calculate the predicted line
# Extract the coefficient from the model fit object
coef(QuadFit)["b0"]
coef(QuadFit)["b1"]
coef(QuadFit)["b2"]
Predic2PlotQuad <- quadMod(density,
coef(QuadFit)["b0"],
coef(QuadFit)["b1"],
coef(QuadFit)["b2"])
Predic2PlotQuad <- quadMod(density,
coef(QuadFit)["b0"],
coef(QuadFit)["b1"],
coef(QuadFit)["b2"])
# Calculate the predicted line
# Extract the coefficient from the model fit object
coef(QuadFit)["b0"]
coef(QuadFit)["b1"]
coef(QuadFit)["b2"]
Predic2PlotQuad <- quadMod(density,
coef(QuadFit)["b0"],
coef(QuadFit)["b1"],
coef(QuadFit)["b2"])
Predic2PlotCubic <- cubMod(density,
coef(CubicFit)["b0"],
coef(CubicFit)["b1"],
coef(CubicFit)["b2"])
Predic2PlotQuad <- quadMod(density,
Quad_b0,
Quad_b1,
Quad_b2)
# Calculate the predicted line
# Extract the coefficient from the model fit object
Quad_b0 <- coef(QuadFit)["b0"]
Quad_b1 <- coef(QuadFit)["b1"]
Quad_b2 <- coef(QuadFit)["b2"]
Predic2PlotQuad <- quadMod(density,
Quad_b0,
Quad_b1,
Quad_b2)
# Generate a vector of ResDensity for plotting
density <- seq(min(data$ResDensity), max(data$ResDensity), len = 200)
Predic2PlotQuad <- quadMod(density,
coef(QuadFit)["b0"],
coef(QuadFit)["b1"],
coef(QuadFit)["b2"])
Predic2PlotCubic <- cubMod(density,
coef(CubicFit)["b0"],
coef(CubicFit)["b1"],
coef(CubicFit)["b2"],
coef(CubicFit)["b3"])
# Plot the data and fitted model
ExercisePlot(data$N_TraitValue ~ data$ResDensity)
# Plot the data and fitted model
plot(data$N_TraitValue ~ data$ResDensity)
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "blue", lwd = 2.5)
# Calculate confidence intervals on the estimated parameters
confint(QuadFit)
confint(CubicFit)
# Create log(N_TraitValue) and log(ResDensity) columns
data$log_N_TraitValue <- log(data$N_TraitValue)
data$log_ResDensity <- log(data$ResDensity)
## Fit the model to the data using NLLS - using log data
QuadFit <- nlsLM(data = data,
log_N_TraitValue ~ quadMod(log_ResDensity, b0, b1, b2),
start = list(b0 = .1, b1 = .1, b2 = .1))
summary(QuadFit)
CubicFit <- nlsLM(data = data,
log_N_TraitValue ~ cubMod(log_ResDensity, b0, b1, b2, b3),
start = list(b0 = .1, b1 = .1, b2 = .1, b3 = .1))
summary(CubicFit)
View(data)
View(data$log_N_TraitValue)
# Generate a vector of ResDensity for plotting
density <- seq(min(data$log_ResDensity), max(data$log_ResDensity), len = 200)
# Calculate the predicted line
# Extract the coefficient from the model fit object
Predic2PlotQuad <- quadMod(density,
coef(QuadFit)["b0"],
coef(QuadFit)["b1"],
coef(QuadFit)["b2"])
Predic2PlotCubic <- cubMod(density,
coef(CubicFit)["b0"],
coef(CubicFit)["b1"],
coef(CubicFit)["b2"],
coef(CubicFit)["b3"])
# Plot the data and fitted model
plot(data$N_TraitValue ~ data$ResDensity)
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity)
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
CubicFit <- nlsLM(data = data,
log_N_TraitValue ~ cubMod(log_ResDensity, b0, b1, b2, b3),
start = list(b0 = .01, b1 = .01, b2 = .01, b3 = .01))
Predic2PlotCubic <- cubMod(density,
coef(CubicFit)["b0"],
coef(CubicFit)["b1"],
coef(CubicFit)["b2"],
coef(CubicFit)["b3"])
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity,
x = "log( Resource abundance )",
y = "log( Number of resources consumed per consumer per unit time )")
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity,
x = "log( Resource abundance )",
y = "log( Number of resources consumed per consumer per unit time )")
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity,
x = "log( Resource abundance )",
y = "log( Number of resources consumed per consumer per unit time )")
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity,
x = "log( Resource abundance )",
y = "log( Number of r unit time )")
density <- seq(min(data$log_ResDensity), max(data$log_ResDensity), len = 200)
# Calculate the predicted line
# Extract the coefficient from the model fit object
Predic2PlotQuad <- quadMod(density,
coef(QuadFit)["b0"],
coef(QuadFit)["b1"],
coef(QuadFit)["b2"])
Predic2PlotCubic <- cubMod(density,
coef(CubicFit)["b0"],
coef(CubicFit)["b1"],
coef(CubicFit)["b2"],
coef(CubicFit)["b3"])
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity,
x = "log( Resource abundance )",
y = "log( Number of resources consumed per consumer per unit time )")
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity)
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity,
xlab = "log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )")
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
summary(QuadFit)
str(data)
View(data$log_N_TraitValue, data$log_ResDensity)
View(data$log_N_TraitValue: data$log_ResDensity)
View(data$log_N_TraitValue)
View(data$log_ResDensity)
plot(density(data$log_ResDensity))
plot(density(data$log_N_TraitValue))
## Visualise data
plot(density(data$log_N_TraitValue),
xlab = "log( Number of resources consumed per consumer per unit time )",
ylab = "Density",
main = NULL)
## Visualise data
plot(density(data$log_N_TraitValue),
xlab = "log( Number of resources consumed per consumer per unit time )",
ylab = "Density",
main = "")
plot(density(data$log_ResDensity),
xlab = "log( Resource abundance )",
ylab = "Density",
main = "")
## Fit the model to the data using NLLS - using log data
QuadFit <- nlsLM(data = data,
log_N_TraitValue ~ quadMod(log_ResDensity, b0, b1, b2),
start = list(b0 = .1, b1 = .1, b2 = .1))
summary(QuadFit)
CubicFit <- nlsLM(data = data,
log_N_TraitValue ~ cubMod(log_ResDensity, b0, b1, b2, b3),
start = list(b0 = .1, b1 = .1, b2 = .1, b3 = .1))
summary(CubicFit)
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity,
xlab = "log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )")
rm(list=ls())
## Load packages
require(dplyr)
require(ggplot2)
require(minpack.lm)
# Quadratic
quadMod <- function(x, b0, b1, b2) {
return (b0 + (b1 * x) + (b2 * (x ^ 2)))
}
# Cubic
cubMod <- function(x, b0, b1, b2, b3) {
return (b0 + (b1 * x) + (b2 * (x ^ 2)) + (b3 * (x ^ 3)))
}
## Load the data
data <- read.csv("../Data/CRat.csv")
# Remove NAs
data <- data[!is.na(data$N_TraitValue),] # no NAs
data <- data[!is.na(data$ResDensity),] # no NAs
# Create log(N_TraitValue) and log(ResDensity) columns
data$log_N_TraitValue <- log(data$N_TraitValue)
data$log_ResDensity <- log(data$ResDensity)
## Visualise data
plot(density(data$log_N_TraitValue),
xlab = "log( Number of resources consumed per consumer per unit time )",
ylab = "Density",
main = "") # Bimodal
plot(density(data$log_ResDensity),
xlab = "log( Resource abundance )",
ylab = "Density",
main = "") # Unimodal
# for loop
# Find number of unique IDs
x <- unique(data$ID)
## Fit the model to the data using NLLS - using log data
QuadFit <- nlsLM(data = data,
log_N_TraitValue ~ quadMod(log_ResDensity, b0, b1, b2),
start = list(b0 = .1, b1 = .1, b2 = .1))
summary(QuadFit)
CubicFit <- nlsLM(data = data,
log_N_TraitValue ~ cubMod(log_ResDensity, b0, b1, b2, b3),
start = list(b0 = .1, b1 = .1, b2 = .1, b3 = .1))
# Generate a vector of ResDensity for plotting
density <- seq(min(data$log_ResDensity), max(data$log_ResDensity), len = 200)
# Calculate the predicted line
# Extract the coefficient from the model fit object
Predic2PlotQuad <- quadMod(density,
coef(QuadFit)["b0"],
coef(QuadFit)["b1"],
coef(QuadFit)["b2"])
Predic2PlotCubic <- cubMod(density,
coef(CubicFit)["b0"],
coef(CubicFit)["b1"],
coef(CubicFit)["b2"],
coef(CubicFit)["b3"])
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity,
xlab = "log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )")
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
plot(data$N_TraitValue ~ data$ResDensity)
plot(data$log_N_TraitValue ~ data$ResDensity)
plot(data$log_N_TraitValue ~ data$log_ResDensity)
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity,
xlab = "log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )")
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
Quad_lm <- lm(data$log_N_TraitValue ~ data$log_ResDensity)
summary(data$log_N_TraitValue)
summary(data$log_ResDensity)
data_0 <- subset(data, N_Trait_Value == 0)
data_0 <- subset(data$N_Trait_Value == 0)
data_0 <- subset(data$N_Trait_Value == "0")
data_0 <- subset(data, N_TraitValue == "0")
View(data_0)
# Remove rows with 0s for N_TraitValue - CHECK IF THIS IS RIGHT!!!
data <- subset(data$N_TraitValue != "0")
# Remove rows with 0s for N_TraitValue - CHECK IF THIS IS RIGHT!!!
data <- subset(data$N_TraitValue != 0)
# Remove rows with 0s for N_TraitValue - CHECK IF THIS IS RIGHT!!!
data <- subset(data, N_TraitValue != "0")
## Housekeeping
rm(list=ls())
graphics.off()
## Load packages #####
require(dplyr)
require(ggplot2)
require(minpack.lm)
# Quadratic - phenomenological
quadMod <- function(x, b0, b1, b2) {
return (b0 + (b1 * x) + (b2 * (x ^ 2)))
}
# Cubic - phenomenological
cubMod <- function(x, b0, b1, b2, b3) {
return (b0 + (b1 * x) + (b2 * (x ^ 2)) + (b3 * (x ^ 3)))
}
# Holling Type II model - mechanistic
HollMod <- function(a,
xR,
h,
a) {
return ( (a * xR) / (1 + (h * a * xR) ) )
}
return ( (a * xR) / (1 + (h * a * xR) ) )
# Holling Type II model - mechanistic
HollMod <- function(a,
xR,
h) {
return ( (a * xR) / (1 + (h * a * xR) ) )
}
# Generalised functional model - mechanistic
HollMod <- function(a, xR, h) {
return ( (a * ( xR ^ (q + 1) ) ) / (1 + (h * a * ( xR ^ (q + 1) ) ) ) )
}
## Load the data #####
data <- read.csv("../Data/CRat.csv")
# Remove NAs
data <- data[!is.na(data$N_TraitValue),] # no NAs
data <- data[!is.na(data$ResDensity),] # no NAs
# Remove rows with 0s for N_TraitValue - CHECK IF THIS IS RIGHT!!!
data <- subset(data, N_TraitValue != "0")
# Create log(N_TraitValue) and log(ResDensity) columns
data$log_N_TraitValue <- log(data$N_TraitValue)
data$log_ResDensity <- log(data$ResDensity)
## Visualise data #####
plot(density(data$log_N_TraitValue),
xlab = "log( Number of resources consumed per consumer per unit time )",
ylab = "Density",
main = "") # Bimodal
plot(density(data$log_ResDensity),
xlab = "log( Resource abundance )",
ylab = "Density",
main = "") # Unimodal
# for loop
# Find number of unique IDs
x <- unique(data$ID)
## Fit the model to the data using NLLS - using log data #####
QuadFit <- nlsLM(data = data,
log_N_TraitValue ~ quadMod(log_ResDensity, b0, b1, b2),
start = list(b0 = .1, b1 = .1, b2 = .1))
summary(QuadFit)
CubicFit <- nlsLM(data = data,
log_N_TraitValue ~ cubMod(log_ResDensity, b0, b1, b2, b3),
start = list(b0 = .1, b1 = .1, b2 = .1, b3 = .1))
summary(CubicFit)
# Generate a vector of ResDensity for plotting
density <- seq(min(data$log_ResDensity), max(data$log_ResDensity), len = 200)
# Calculate the predicted line
# Extract the coefficient from the model fit object
Predic2PlotQuad <- quadMod(density,
coef(QuadFit)["b0"],
coef(QuadFit)["b1"],
coef(QuadFit)["b2"])
Predic2PlotCubic <- cubMod(density,
coef(CubicFit)["b0"],
coef(CubicFit)["b1"],
coef(CubicFit)["b2"],
coef(CubicFit)["b3"])
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity,
xlab = "log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )")
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
# Calculate the predicted line
# Extract the coefficient from the model fit object
coef(QuadFit)["b0"]
coef(QuadFit)["b1"]
coef(QuadFit)["b2"]
# Calculate confidence intervals on the estimated parameters
confint(QuadFit)  #??
confint(CubicFit) #??
# R^2 value
RSS_Qua <- sum(residuals(QuadFit)^2)  # Residual sum of squares
TSS_Qua <- sum((data$log_N_TraitValue - mean(data$log_N_TraitValue))^2)  # Total sum of squares
RSq_Qua <- 1 - (RSS_Pow/TSS_Pow)  # R-squared value
RSq_Qua <- 1 - (RSS_Qua/TSS_Qua)  # R-squared value
RSq_Qua
RSS_Cub <- sum(residuals(CubicFit)^2)  # Residual sum of squares
TSS_Cub <- sum((data$log_N_TraitValue - mean(data$log_N_TraitValue))^2)  # Total sum of squares
RSq_Cub <- 1 - (RSS_Cub/TSS_Cub)  # R-squared value
RSq_Cub
## Akaike Information Criterion (AIC) #####
n <- nrow(data) # set sample size
pQua <- length(coef(QuadFit)) # get number of parameters in power law model
pCub <- length(coef(CubicFit)) # get number of parameters in quadratic model
AIC_Qua <- n + 2 + n * log((2 * pi) / n) +  n * log(RSS_Qua) + 2 * pQua
AIC_Cub <- n + 2 + n * log((2 * pi) / n) + n * log(RSS_Cub) + 2 * pCub
# Compare Quadratic and Cubic
AIC_Qua - AIC_Cub
# Compare Quadratic and Cubic
(AIC_Qua - AIC_Cub) == (AIC(QuaFit) - AIC(CubicFit))
# Compare Quadratic and Cubic
(AIC_Qua - AIC_Cub) == (AIC(QuadFit) - AIC(CubicFit))
# Compare Quadratic and Cubic
(AIC_Qua - AIC_Cub) ==
(AIC(QuadFit) - AIC(CubicFit))
(AIC(QuadFit) - AIC(CubicFit))
# Compare Quadratic and Cubic
(AIC_Qua - AIC_Cub)
## Akaike Information Criterion (AIC) #####
# declare winner if difference >2
# Compare Quadratic and Cubic
AIC(QuadFit) - AIC(CubicFit) # 47.52271
plot(data$log_N_TraitValue[data$ID == i] ~ data$log_ResDensity[data$ID == i],
xlab="log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )",
main=paste("ID = ", i),
cex.main = 1)
for(i in x) {
setwd("../Plots/")
pdf(paste("ID_", i))
plot(data$log_N_TraitValue[data$ID == i] ~ data$log_ResDensity[data$ID == i],
xlab="log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )",
main=paste("ID = ", i),
cex.main = 1)
graphics.off()
setwd("../Code/")
}
for(i in x) {
setwd("../Plots/")
pdf(paste("ID_", i))
plot(data$log_N_TraitValue[data$ID == i] ~ data$log_ResDensity[data$ID == i],
xlab="log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )",
main=paste("ID = ", i),
cex.main = 1)
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
graphics.off()
setwd("../Code/")
}
for(i in x) {
setwd("../Plots/")
pdf(paste("ID_", i))
plot(data$log_N_TraitValue[data$ID == i] ~ data$log_ResDensity[data$ID == i],
xlab="log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )",
main=paste("ID = ", i),
cex.main = 1)
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
graphics.off()
setwd("../Code/")
}
# Plot the data and fitted model
plot(data$log_N_TraitValue ~ data$log_ResDensity,
xlab = "log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )")
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
for(i in x) {
setwd("../Plots/")
pdf(paste("ID_", i))
plot(data$log_N_TraitValue[data$ID == i] ~ data$log_ResDensity[data$ID == i],
xlab="log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )",
main=paste("ID = ", i),
cex.main = 1,
xlim = c(-5, 20),
ylim = c(-10, 15))
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
graphics.off()
setwd("../Code/")
}
plot(data$log_N_TraitValue[data$ID == i] ~ data$log_ResDensity[data$ID == i],
xlab="log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )",
main=paste("ID = ", i),
cex.main = 1)
for(i in x) {
setwd("../Plots/")
pdf(paste("ID_", i))
plot(data$log_N_TraitValue[data$ID == i] ~ data$log_ResDensity[data$ID == i],
xlab="log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )",
main=paste("ID = ", i),
cex.main = 1)
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
graphics.off()
setwd("../Code/")
}
for(i in x) {
setwd("../Plots/")
pdf(paste("ID_", i))
plot(data$log_N_TraitValue[data$ID == i] ~ data$log_ResDensity[data$ID == i],
xlab="log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )",
main=paste("ID = ", i),
cex.main = 1,
xlim = c(-5, 20),
ylim = c(-10, 15))
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
graphics.off()
setwd("../Code/")
}
for(i in x) {
setwd("../Plots/")
pdf(paste("ID_", i))
plot(data$log_N_TraitValue[data$ID == i] ~ data$log_ResDensity[data$ID == i],
xlab="log( Resource abundance )",
ylab = "log( Number of resources consumed per consumer per unit time )",
main=paste("ID = ", i),
cex.main = 1,
xlim = c(-5, 20),
ylim = c(-12, 17))
lines(Predic2PlotQuad ~ density, col = "blue", lwd = 2.5)
lines(Predic2PlotCubic ~ density, col = "red", lwd = 2.5)
graphics.off()
setwd("../Code/")
}
# Holling Type II model - mechanistic
HollMod <- function(a,
xR,
h) {
return ( (a * xR) / (1 + (h * a * xR) ) )
}
HollFit <- nlsLM(data = data,
log_N_TraitValue ~ HollMod(a, xR, h),
start = list(a = .1, xR = .1, h = .1))
